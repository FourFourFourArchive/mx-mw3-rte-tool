using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Call_Of_Duty_Multi_Tool_1;
using PS3Lib;

    class Hud
    {
        
		
	public void setIcon(uint elem, uint shader, int width, int height, float x, float y, uint align, float sort = 0, int r = 255, int g = 255, int b = 255, int a = 255)
        {
            Call_Of_Duty_Multi_Tool_1._0._0.Form1.PS3.SetMemory(elem, new byte[0xB4]);
            Call_Of_Duty_Multi_Tool_1._0._0.Form1.PS3.SetMemory(elem, new byte[] { 0x00, 0x00, 0x00, 0x04 });

            Call_Of_Duty_Multi_Tool_1._0._0.Form1.PS3.SetMemory(elem + HElems.relativeOffset, uintBytes(0x05));
            Call_Of_Duty_Multi_Tool_1._0._0.Form1.PS3.SetMemory(elem + HElems.relativeOffset - 4, uintBytes(0x06));
            Call_Of_Duty_Multi_Tool_1._0._0.Form1.PS3.SetMemory(elem + HElems.shaderOffset, uintBytes(shader));
            Call_Of_Duty_Multi_Tool_1._0._0.Form1.PS3.SetMemory(elem + HElems.heightOffset, ReverseBytes(BitConverter.GetBytes(height)));
            Call_Of_Duty_Multi_Tool_1._0._0.Form1.PS3.SetMemory(elem + HElems.widthOffset, ReverseBytes(BitConverter.GetBytes(width)));
            Call_Of_Duty_Multi_Tool_1._0._0.Form1.PS3.SetMemory(elem + HElems.alignOffset, uintBytes(align));
            Call_Of_Duty_Multi_Tool_1._0._0.Form1.PS3.SetMemory(elem + HElems.textOffset + 4, ReverseBytes(BitConverter.GetBytes(sort)));
            Call_Of_Duty_Multi_Tool_1._0._0.Form1.PS3.SetMemory(elem + HElems.xOffset, ReverseBytes(BitConverter.GetBytes(x)));
            Call_Of_Duty_Multi_Tool_1._0._0.Form1.PS3.SetMemory(elem + HElems.yOffset, ReverseBytes(BitConverter.GetBytes(y)));
            Call_Of_Duty_Multi_Tool_1._0._0.Form1.PS3.SetMemory(elem + HElems.colorOffset, new byte[] { BitConverter.GetBytes(r)[0], BitConverter.GetBytes(g)[0], BitConverter.GetBytes(b)[0], BitConverter.GetBytes(a)[0] });
        }

        public void setText(uint elem, byte[] text, uint font, float fontScale, float x, float y, uint align, int r = 255, int g = 255, int b = 255, int a = 255)
        {
            SetMemory(elem, new byte[0xB4]);
            SetMemory(elem, new byte[] { 0x00, 0x00, 0x00, 0x01 });

            SetMemory(elem + HElems.textOffset, text);
            SetMemory(elem + HElems.relativeOffset, uintBytes(0x05));
            SetMemory(elem + HElems.relativeOffset - 4, uintBytes(0x06));
            SetMemory(elem + HElems.fontOffset, uintBytes(font));
            SetMemory(elem + HElems.alignOffset, uintBytes(align));
            SetMemory(elem + HElems.textOffset + 4, new byte[] { 0x40, 0x00 });
            SetMemory(elem + HElems.fontSizeOffset, ReverseBytes(BitConverter.GetBytes(fontScale)));
            SetMemory(elem + HElems.xOffset, ReverseBytes(BitConverter.GetBytes(x)));
            SetMemory(elem + HElems.yOffset, ReverseBytes(BitConverter.GetBytes(y)));
            SetMemory(elem + HElems.colorOffset, new byte[] { BitConverter.GetBytes(r)[0], BitConverter.GetBytes(g)[0], BitConverter.GetBytes(b)[0], BitConverter.GetBytes(a)[0] });
        }
		
		
	private void SetMemory(uint addr, byte[] val)
        {
           PS3TMAPI.ProcessSetMemory(0, PS3TMAPI.UnitType.PPU, 0, 0xFFFFFFFF, addr, val);
        }
		
	private void RPC_Enable_124()
        {
            SetMemory(0x523B10, new byte[2175]);
            SetMemory(0x18BE6C, new byte[] { 0x60, 0x00, 0x00, 0x00 });
            SetMemory(0x3BC9CC, new byte[] { 0x60, 0x00, 0x00, 0x00 });
            SetMemory(0x18BE74, new byte[] { 0x48, 0x00, 0x00, 0x68 });
            SetMemory(0x1DB1244, new byte[4]);
            SetMemory(0x114AE64, new byte[4]);
            SetMemory(0x3BC9E4, new byte[] { 0x41, 0x82, 0x02, 0x20, 0x3D, 0x00, 0x00, 0x52, 0x80, 0x68, 0x3B, 0x10, 0x80, 0x88, 0x3B, 0x14, 0x80, 0xA8, 0x3B, 0x18, 0x80, 0xC8, 0x3B, 0x1C, 0x80, 0xE8, 0x3B, 0x20, 0x39, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x1D, 0x3C, 0x80, 0x01, 0x15, 0x90, 0x64, 0xAE, 0x64, 0x38, 0x80, 0x00, 0x00, 0x3C, 0x60, 0x01, 0xDB, 0x90, 0x83, 0x12, 0x44, 0x48, 0x00, 0x01, 0xE8, 0x4E, 0x80, 0x00, 0x20, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00 });
        }

        private uint str_pointer(string str)
        {
            uint addr = 0x523B30;
            byte[] check = new byte[1];
            uint i;
            for (i = 0; i < 5; i++)
            {
                PS3TMAPI.ProcessGetMemory(0, PS3TMAPI.UnitType.PPU, 0, 0xFFFFFFFF, addr, ref check);
                if (check[0] == 0x00) break;
                if (i == 4)
                {
                    i = 0;
                    break;
                }
            }
            addr = (0x523B30 + (i * 0x68));
            SetMemory(addr, new byte[0x68]);
            SetMemory(addr, Encoding.UTF8.GetBytes(str));
            return addr;
        }
		
	private void CallFunc(uint func_addr, uint param1 = 0, uint param2 = 0, uint param3 = 0, uint param4 = 0, uint param5 = 0)
        {
            byte[] par1 = BitConverter.GetBytes(param1);
            byte[] par2 = BitConverter.GetBytes(param2);
            byte[] par3 = BitConverter.GetBytes(param3);
            byte[] par4 = BitConverter.GetBytes(param4);
            byte[] par5 = BitConverter.GetBytes(param5);
            Array.Reverse(par1);
            Array.Reverse(par2);
            Array.Reverse(par3);
            Array.Reverse(par4);
            Array.Reverse(par5);
            SetMemory(0x523B10, par1);
            SetMemory(0x523B14, par2);
            SetMemory(0x523B18, par3);
            SetMemory(0x523B1C, par4);
            SetMemory(0x523B20, par5);
            SetMemory(0x3BCA04, MakeBl(0x3BCA04, func_addr));
            SetMemory(0x1DB1244, new byte[] { 0x00, 0x00, 0x00, 0x01 });
            System.Threading.Thread.Sleep(10);
        }

        private uint GetFuncReturn()
        {
            byte[] ret = new byte[4];
            PS3TMAPI.ProcessGetMemory(0, PS3TMAPI.UnitType.PPU, 0, 0xFFFFFFFF, 0x114AE64, ref ret);
            Array.Reverse(ret);
            return BitConverter.ToUInt32(ret, 0);
        }

        private byte[] MakeBl(uint callAddr, uint addrToBlTo)
        {
            byte[] instruction = new byte[4];
            uint addr_t = (uint)(((int)addrToBlTo - (int)callAddr) + 1);
            if ((int)addrToBlTo > (int)callAddr) instruction[3] = 0x48;
            else
            {
                instruction[3] = 0x4B;
                addr_t = (uint)(0x1000000 - ((int)callAddr - (int)addrToBlTo) + 1);
            }
            byte[] addr = BitConverter.GetBytes(addr_t);
            for (int i = 0; i < 3; i++)
            {
                instruction[i] = addr[i];
            }
            Array.Reverse(instruction);
            return instruction;
        }
		
	public void DestroyElem(uint elem)
        {
            SetMemory(elem, new byte[0xB4]);
        }

        public void spawnElem(int client, uint elemAddress)
        {
            SetMemory(elemAddress + 0xA8, ReverseBytes(BitConverter.GetBytes(client)));
        }

        public byte[] uintBytes(uint input)
        {
            byte[] data = BitConverter.GetBytes(input);
            Array.Reverse(data);
            return data;
        }

        public uint createText(string text)
        {
            CallFunc(0x1BE6CC, str_pointer(text));
            System.Threading.Thread.Sleep(10);
            return GetFuncReturn();
        }
		
	public byte[] ReverseBytes(byte[] inArray)
        {
            Array.Reverse(inArray);
            return inArray;
        }

	private uint HudElem_Alloc()
        {
            byte[] elem = new byte[1];
            uint add;
            for (int i = 0; i < 1024; i++)
            {
                add = (uint)(0xF0E10C + (i * 0xB4));
                PS3TMAPI.ProcessGetMemory(0, PS3TMAPI.UnitType.PPU, 0, 0xFFFFFFFF, add, ref elem);
                if ((int)elem[0] == 0)
                {
                    SetMemory(add, new byte[0xB1]);
                    return add;
                }
            }
            return 0;
        }

        public static void HudElem_DestroyAll()
        {
            Call_Of_Duty_Multi_Tool_1._0._0.Form1.PS3.SetMemory(0xF0E10C, new byte[184320]);
        }
		
	private int GetMaterialIndex(string str)
        {
            CallFunc(0x1BE744, str_pointer(str));
            return (int)GetFuncReturn();
        }
    public static class HElems
    {
        public static uint
        xOffset = 0x04,
        yOffset = 0x08,
        textOffset = 0x84,
        fontOffset = 0x24,
        fontSizeOffset = 0x14,
        colorOffset = 0x30,
        relativeOffset = 0x2c,
        widthOffset = 0x44,
        heightOffset = 0x48,
        shaderOffset = 0x4c,
        GlowColor = 0x8C,
        alignOffset = 0x2C;
    }



    }
